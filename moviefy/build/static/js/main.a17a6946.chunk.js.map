{"version":3,"sources":["Components/Movie.js","Components/MoviesList.js","Components/MovieDetail.js","App.js","serviceWorker.js","index.js"],"names":["Movie","_ref","movie","react_default","a","createElement","Link","to","concat","id","Overdrive_min_default","Poster","src","poster_path","alt","title","styled","img","_templateObject","MoviesList","state","movies","movieSearch","updateInput","event","_this","setState","target","value","Search","_callee","result","regenerator_default","wrap","_context","prev","next","fetch","sent","json","results","t0","stop","this","_this$state","MovieSearchInput","type","onChange","SearchButton","onClick","MovieGrid","map","Components_Movie","key","PureComponent","div","MoviesList_templateObject","input","_templateObject2","button","_templateObject3","MoviesDetail","match","props","params","MovieWrapper","backdrop","backdrop_path","MovieInfo","overview","release_date","Component","MovieDetail_templateObject","MovieDetail_templateObject2","App","BrowserRouter","className","PageTitle","Switch","Route","exact","path","component","MovieDetail","h1","App_templateObject","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a17a6946.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport Overdrive from 'react-overdrive';\n\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w154';\n\nconst Movie = ({ movie }) => (\n  <Link to={`/${movie.id}`}>\n    <Overdrive id={movie.id}>\n      <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\n    </Overdrive>\n  </Link>\n);\n\nexport default Movie;\n\nMovie.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nexport const Poster = styled.img`\n  box-shadow: 0 0 35px black;\n`;\n","import React, { PureComponent } from 'react';\nimport styled from 'styled-components';\nimport Movie from './Movie';\n\nclass MoviesList extends PureComponent {\n  state = {\n    movies: [],\n    movieSearch: '',\n  };\n\n  async componentDidMount() {\n    try {\n      const result = await fetch(\n        'https://api.themoviedb.org/3/discover/movie?api_key=2a208bd9217b421273ab1506025ce6e6&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1',\n      );\n      const movies = await result.json();\n      this.setState({\n        movies: movies.results,\n      });\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  updateInput = (event) => {\n    this.setState({\n      movieSearch: event.target.value,\n    });\n  };\n\n  Search = async () => {\n    const { movieSearch } = this.state;\n    try {\n      const result = await fetch(\n        `https://api.themoviedb.org/3/search/movie?api_key=2a208bd9217b421273ab1506025ce6e6&query=${movieSearch}`,\n      );\n      const movies = await result.json();\n\n      this.setState({\n        movies: movies.results,\n        movieSearch: '',\n      });\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  render() {\n    const { movies, movieSearch } = this.state;\n    return (\n      <div>\n        <MovieSearchInput type=\"text\" onChange={this.updateInput} value={movieSearch} />\n        <SearchButton type=\"submit\" onClick={this.Search}>\n          Search\n        </SearchButton>\n        <MovieGrid>\n          {movies.map(movie => (\n            <Movie key={movie.id} movie={movie} />\n          ))}\n        </MovieGrid>\n      </div>\n    );\n  }\n}\n\nexport default MoviesList;\n\nconst MovieGrid = styled.div`\n  display: grid;\n  padding: 1rem;\n  grid-template-columns: repeat(4, 1fr);\n  grid-row-gap: 1rem;\n`;\n\nconst MovieSearchInput = styled.input`\n  border: none;\n  height: 20px;\n  border-radius: 10px;\n  margin: 0 5px;\n`;\n\nconst SearchButton = styled.button`\n  border: none;\n  color: white;\n  height: 20px;\n  border-radius: 10px;\n  background: #551a8b;\n`;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Overdrive from 'react-overdrive';\nimport { Poster } from './Movie';\n\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w154';\nconst BACKDROP_PATH = 'http://image.tmdb.org/t/p/w1280';\n\nclass MoviesDetail extends Component {\n  state = {\n    movie: {},\n  };\n\n  async componentDidMount() {\n    try {\n      const { match } = this.props;\n      const result = await fetch(\n        `https://api.themoviedb.org/3/movie/${\n          match.params.id\n        }?api_key=2a208bd9217b421273ab1506025ce6e6&language=en-US`,\n      );\n      const movie = await result.json();\n      this.setState({\n        movie,\n      });\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  render() {\n    const { movie } = this.state;\n    return (\n      <MovieWrapper backdrop={`${BACKDROP_PATH}${movie.backdrop_path}`}>\n        <MovieInfo>\n          <Overdrive id={movie.id}>\n            <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\n          </Overdrive>\n          <div>\n            <h1>{movie.title}</h1>\n            <p>{movie.overview}</p>\n            <h3>{`ReleaseDate: ${movie.release_date}`}</h3>\n          </div>\n        </MovieInfo>\n      </MovieWrapper>\n    );\n  }\n}\n\nexport default MoviesDetail;\n\nconst MovieWrapper = styled.div`\n    position: relative;\n    padding-top: 50vh;\n    background: url(${props => props.backdrop}) no-repeat\n    background-size: cover \n`;\n\nconst MovieInfo = styled.div`\n  background: white;\n  text-align: left;\n  padding: 2rem 10%;\n  display: flex;\n  > div {\n    margin-left: 20px;\n  }\n  img {\n    position: relative;\n    top: -5rem;\n  }\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport {\n  BrowserRouter as Router, Route, Switch, Link,\n} from 'react-router-dom';\nimport './App.css';\n\nimport MoviesList from './Components/MoviesList';\nimport MovieDetail from './Components/MovieDetail';\n\nconst App = () => (\n  <Router>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Link to=\"/\">\n          <PageTitle>MOVIEFY</PageTitle>\n        </Link>\n      </header>\n      <Switch>\n        <Route exact path=\"/\" component={MoviesList} />\n        <Route path=\"/:id\" component={MovieDetail} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n\nconst PageTitle = styled.h1`\n  text-decoration: none;\n  color: white;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}